name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Archive production artifacts
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          mkdir deploy-package
          cp -r dist deploy-package/
          cp appspec.yml deploy-package/
          cp -r scripts deploy-package/
          cp package.json deploy-package/
          cp -r public deploy-package/
          cp -r src deploy-package/
          cp .babelrc deploy-package/
          cp .eslintrc.cjs deploy-package/
          cp .gitignore deploy-package/
          cp index.html deploy-package/
          cp jest.config.jsx deploy-package/
          cp README.md deploy-package/
          cp setupTests.js deploy-package/
          cp vite.config.js deploy-package/
          cd deploy-package
          zip -r ../deploy-package-${{ github.sha }}-${TIMESTAMP}.zip .
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Store previous deployment package
        run: |
            PREVIOUS_PACKAGE=$(aws s3api list-objects-v2 --bucket ${{ secrets.S3_BUCKET }} --query 'Contents[].[Key]' --output text | grep deploy-package)
            if [ -n "$PREVIOUS_PACKAGE" ]; then
              aws s3 cp s3://${{ secrets.S3_BUCKET }}/$PREVIOUS_PACKAGE s3://${{ secrets.S3_BUCKET }}/previous-${TIMESTAMP}.zip
            fi
  
      - name: Upload new deployment package
        run: aws s3 cp deploy-package-${{ env.TIMESTAMP }}.zip s3://${{ secrets.S3_BUCKET }}/deploy-package-${{ env.TIMESTAMP }}.zip
  
      - name: Deploy to CodeDeploy
        id: deploy
        run: |
            DEPLOYMENT_ID=$(aws deploy create-deployment \
              --application-name ${{ secrets.AWS_CODE_DEPLOY_APPLICATION_NAME }} \
              --deployment-group-name ${{ secrets.AWS_DEPLOYMENT_GROUP_NAME }} \
              --s3-location bucket=${{ secrets.S3_BUCKET }},key=deploy-package-${{ env.TIMESTAMP }}.zip,bundleType=zip \
              --query "deploymentId" --output text)
            echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV